'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="cocina")>  _
Partial Public Class CocinaDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  Partial Private Sub InsertUnidad(instance As Unidad)
    End Sub
  Partial Private Sub UpdateUnidad(instance As Unidad)
    End Sub
  Partial Private Sub DeleteUnidad(instance As Unidad)
    End Sub
  Partial Private Sub InsertSucursal(instance As Sucursal)
    End Sub
  Partial Private Sub UpdateSucursal(instance As Sucursal)
    End Sub
  Partial Private Sub DeleteSucursal(instance As Sucursal)
    End Sub
  Partial Private Sub InsertGrupo(instance As Grupo)
    End Sub
  Partial Private Sub UpdateGrupo(instance As Grupo)
    End Sub
  Partial Private Sub DeleteGrupo(instance As Grupo)
    End Sub
  Partial Private Sub InsertCategoria(instance As Categoria)
    End Sub
  Partial Private Sub UpdateCategoria(instance As Categoria)
    End Sub
  Partial Private Sub DeleteCategoria(instance As Categoria)
    End Sub
  Partial Private Sub InsertKardex(instance As Kardex)
    End Sub
  Partial Private Sub UpdateKardex(instance As Kardex)
    End Sub
  Partial Private Sub DeleteKardex(instance As Kardex)
    End Sub
  Partial Private Sub InsertProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub UpdateProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub DeleteProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub InsertProductos(instance As Productos)
    End Sub
  Partial Private Sub UpdateProductos(instance As Productos)
    End Sub
  Partial Private Sub DeleteProductos(instance As Productos)
    End Sub
  Partial Private Sub InsertCompra(instance As Compra)
    End Sub
  Partial Private Sub UpdateCompra(instance As Compra)
    End Sub
  Partial Private Sub DeleteCompra(instance As Compra)
    End Sub
  Partial Private Sub InsertRemision2(instance As Remision2)
    End Sub
  Partial Private Sub UpdateRemision2(instance As Remision2)
    End Sub
  Partial Private Sub DeleteRemision2(instance As Remision2)
    End Sub
  Partial Private Sub InsertDetaBodega(instance As DetaBodega)
    End Sub
  Partial Private Sub UpdateDetaBodega(instance As DetaBodega)
    End Sub
  Partial Private Sub DeleteDetaBodega(instance As DetaBodega)
    End Sub
  Partial Private Sub InsertBodegas(instance As Bodegas)
    End Sub
  Partial Private Sub UpdateBodegas(instance As Bodegas)
    End Sub
  Partial Private Sub DeleteBodegas(instance As Bodegas)
    End Sub
  Partial Private Sub InsertRemision(instance As Remision)
    End Sub
  Partial Private Sub UpdateRemision(instance As Remision)
    End Sub
  Partial Private Sub DeleteRemision(instance As Remision)
    End Sub
  Partial Private Sub InsertDetaRemision(instance As DetaRemision)
    End Sub
  Partial Private Sub UpdateDetaRemision(instance As DetaRemision)
    End Sub
  Partial Private Sub DeleteDetaRemision(instance As DetaRemision)
    End Sub
  Partial Private Sub InsertDetalleCompra(instance As DetalleCompra)
    End Sub
  Partial Private Sub UpdateDetalleCompra(instance As DetalleCompra)
    End Sub
  Partial Private Sub DeleteDetalleCompra(instance As DetalleCompra)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Cocina.My.MySettings.Default.cocinaConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Usuario() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Unidad() As System.Data.Linq.Table(Of Unidad)
		Get
			Return Me.GetTable(Of Unidad)
		End Get
	End Property
	
	Public ReadOnly Property IdTablas() As System.Data.Linq.Table(Of IdTablas)
		Get
			Return Me.GetTable(Of IdTablas)
		End Get
	End Property
	
	Public ReadOnly Property Sucursal() As System.Data.Linq.Table(Of Sucursal)
		Get
			Return Me.GetTable(Of Sucursal)
		End Get
	End Property
	
	Public ReadOnly Property Grupo() As System.Data.Linq.Table(Of Grupo)
		Get
			Return Me.GetTable(Of Grupo)
		End Get
	End Property
	
	Public ReadOnly Property Categoria() As System.Data.Linq.Table(Of Categoria)
		Get
			Return Me.GetTable(Of Categoria)
		End Get
	End Property
	
	Public ReadOnly Property Kardex() As System.Data.Linq.Table(Of Kardex)
		Get
			Return Me.GetTable(Of Kardex)
		End Get
	End Property
	
	Public ReadOnly Property ViewRemision() As System.Data.Linq.Table(Of ViewRemision)
		Get
			Return Me.GetTable(Of ViewRemision)
		End Get
	End Property
	
	Public ReadOnly Property VistaProd() As System.Data.Linq.Table(Of VistaProd)
		Get
			Return Me.GetTable(Of VistaProd)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor() As System.Data.Linq.Table(Of Proveedor)
		Get
			Return Me.GetTable(Of Proveedor)
		End Get
	End Property
	
	Public ReadOnly Property Productos() As System.Data.Linq.Table(Of Productos)
		Get
			Return Me.GetTable(Of Productos)
		End Get
	End Property
	
	Public ReadOnly Property RptRemsion() As System.Data.Linq.Table(Of RptRemsion)
		Get
			Return Me.GetTable(Of RptRemsion)
		End Get
	End Property
	
	Public ReadOnly Property ViewProveedor() As System.Data.Linq.Table(Of ViewProveedor)
		Get
			Return Me.GetTable(Of ViewProveedor)
		End Get
	End Property
	
	Public ReadOnly Property Compra() As System.Data.Linq.Table(Of Compra)
		Get
			Return Me.GetTable(Of Compra)
		End Get
	End Property
	
	Public ReadOnly Property Remision2() As System.Data.Linq.Table(Of Remision2)
		Get
			Return Me.GetTable(Of Remision2)
		End Get
	End Property
	
	Public ReadOnly Property VistaDetaProd() As System.Data.Linq.Table(Of VistaDetaProd)
		Get
			Return Me.GetTable(Of VistaDetaProd)
		End Get
	End Property
	
	Public ReadOnly Property DetaBodega() As System.Data.Linq.Table(Of DetaBodega)
		Get
			Return Me.GetTable(Of DetaBodega)
		End Get
	End Property
	
	Public ReadOnly Property Bodegas() As System.Data.Linq.Table(Of Bodegas)
		Get
			Return Me.GetTable(Of Bodegas)
		End Get
	End Property
	
	Public ReadOnly Property Remision() As System.Data.Linq.Table(Of Remision)
		Get
			Return Me.GetTable(Of Remision)
		End Get
	End Property
	
	Public ReadOnly Property DetaRemision() As System.Data.Linq.Table(Of DetaRemision)
		Get
			Return Me.GetTable(Of DetaRemision)
		End Get
	End Property
	
	Public ReadOnly Property DetalleCompras() As System.Data.Linq.Table(Of DetalleCompra)
		Get
			Return Me.GetTable(Of DetalleCompra)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.filtrarGrupo")>  _
	Public Function filtrarGrupo(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nombre", DbType:="VarChar(100)")> ByVal nombre As String) As ISingleResult(Of filtrarGrupoResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nombre)
		Return CType(result.ReturnValue,ISingleResult(Of filtrarGrupoResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.FiltrarCategoria")>  _
	Public Function FiltrarCategoria(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descripcion", DbType:="VarChar(100)")> ByVal descripcion As String) As ISingleResult(Of FiltrarCategoriaResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descripcion)
		Return CType(result.ReturnValue,ISingleResult(Of FiltrarCategoriaResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.FiltrarProducto")>  _
	Public Function FiltrarProducto(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nombre", DbType:="VarChar(100)")> ByVal nombre As String) As ISingleResult(Of FiltrarProductoResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nombre)
		Return CType(result.ReturnValue,ISingleResult(Of FiltrarProductoResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.FiltrarSucursal")>  _
	Public Function FiltrarSucursal(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nombre", DbType:="VarChar(100)")> ByVal nombre As String) As ISingleResult(Of FiltrarSucursalResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nombre)
		Return CType(result.ReturnValue,ISingleResult(Of FiltrarSucursalResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.FiltrarBodega")>  _
	Public Function FiltrarBodega(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nombre", DbType:="VarChar(100)")> ByVal nombre As String) As ISingleResult(Of FiltrarBodegaResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nombre)
		Return CType(result.ReturnValue,ISingleResult(Of FiltrarBodegaResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.actIdFact")>  _
	Public Function actIdFact() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.actIdRemision")>  _
	Public Function actIdRemision() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.FiltrarProveedor")>  _
	Public Function FiltrarProveedor(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nombre", DbType:="VarChar(50)")> ByVal nombre As String) As ISingleResult(Of FiltrarProveedorResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nombre)
		Return CType(result.ReturnValue,ISingleResult(Of FiltrarProveedorResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.insertDetaBodega")>  _
	Public Function insertDetaBodega(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodProducto", DbType:="VarChar(20)")> ByVal codProducto As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdBodega", DbType:="Int")> ByVal idBodega As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Existencia", DbType:="Decimal(12,2)")> ByVal existencia As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), codProducto, idBodega, existencia)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.insertarDetaCompra")>  _
	Public Function insertarDetaCompra(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Codigo", DbType:="VarChar(20)")> ByVal codigo As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nombre", DbType:="VarChar(100)")> ByVal nombre As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cantidad", DbType:="Decimal(12,2)")> ByVal cantidad As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UnidadM", DbType:="VarChar(10)")> ByVal unidadM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PrecioC", DbType:="Decimal(12,2)")> ByVal precioC As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Consecutivo", DbType:="Int")> ByVal consecutivo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Fecha", DbType:="Date")> ByVal fecha As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCategoria", DbType:="VarChar(20)")> ByVal idCategoria As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdGrupo", DbType:="VarChar(20)")> ByVal idGrupo As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NumFact", DbType:="VarChar(20)")> ByVal numFact As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProveedor", DbType:="Int")> ByVal idProveedor As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), codigo, nombre, cantidad, unidadM, precioC, consecutivo, fecha, idCategoria, idGrupo, numFact, idProveedor)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdUsuairo As Integer
	
	Private _Usuario As String
	
	Private _Clave As String
	
	Private _Nombre As String
	
	Private _Apellido As String
	
	Private _Nivel As Integer
	
	Private _FCrea As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdUsuairoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuairoChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnClaveChanging(value As String)
    End Sub
    Partial Private Sub OnClaveChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnApellidoChanging(value As String)
    End Sub
    Partial Private Sub OnApellidoChanged()
    End Sub
    Partial Private Sub OnNivelChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelChanged()
    End Sub
    Partial Private Sub OnFCreaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFCreaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuairo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdUsuairo() As Integer
		Get
			Return Me._IdUsuairo
		End Get
		Set
			If ((Me._IdUsuairo = value)  _
						= false) Then
				Me.OnIdUsuairoChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuairo = value
				Me.SendPropertyChanged("IdUsuairo")
				Me.OnIdUsuairoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Clave", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Clave() As String
		Get
			Return Me._Clave
		End Get
		Set
			If (String.Equals(Me._Clave, value) = false) Then
				Me.OnClaveChanging(value)
				Me.SendPropertyChanging
				Me._Clave = value
				Me.SendPropertyChanged("Clave")
				Me.OnClaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apellido", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Apellido() As String
		Get
			Return Me._Apellido
		End Get
		Set
			If (String.Equals(Me._Apellido, value) = false) Then
				Me.OnApellidoChanging(value)
				Me.SendPropertyChanging
				Me._Apellido = value
				Me.SendPropertyChanged("Apellido")
				Me.OnApellidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nivel", DbType:="Int NOT NULL")>  _
	Public Property Nivel() As Integer
		Get
			Return Me._Nivel
		End Get
		Set
			If ((Me._Nivel = value)  _
						= false) Then
				Me.OnNivelChanging(value)
				Me.SendPropertyChanging
				Me._Nivel = value
				Me.SendPropertyChanged("Nivel")
				Me.OnNivelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FCrea", DbType:="Date")>  _
	Public Property FCrea() As System.Nullable(Of Date)
		Get
			Return Me._FCrea
		End Get
		Set
			If (Me._FCrea.Equals(value) = false) Then
				Me.OnFCreaChanging(value)
				Me.SendPropertyChanging
				Me._FCrea = value
				Me.SendPropertyChanged("FCrea")
				Me.OnFCreaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Unidad")>  _
Partial Public Class Unidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdUnidad As Integer
	
	Private _UdidadM As String
	
	Private _Descripcion As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdUnidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUnidadChanged()
    End Sub
    Partial Private Sub OnUdidadMChanging(value As String)
    End Sub
    Partial Private Sub OnUdidadMChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnidad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdUnidad() As Integer
		Get
			Return Me._IdUnidad
		End Get
		Set
			If ((Me._IdUnidad = value)  _
						= false) Then
				Me.OnIdUnidadChanging(value)
				Me.SendPropertyChanging
				Me._IdUnidad = value
				Me.SendPropertyChanged("IdUnidad")
				Me.OnIdUnidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UdidadM", DbType:="VarChar(50)")>  _
	Public Property UdidadM() As String
		Get
			Return Me._UdidadM
		End Get
		Set
			If (String.Equals(Me._UdidadM, value) = false) Then
				Me.OnUdidadMChanging(value)
				Me.SendPropertyChanging
				Me._UdidadM = value
				Me.SendPropertyChanged("UdidadM")
				Me.OnUdidadMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(100)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IdTablas")>  _
Partial Public Class IdTablas
	
	Private _IdCompra As Integer
	
	Private _IdRemision As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCompra", DbType:="Int NOT NULL")>  _
	Public Property IdCompra() As Integer
		Get
			Return Me._IdCompra
		End Get
		Set
			If ((Me._IdCompra = value)  _
						= false) Then
				Me._IdCompra = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdRemision", DbType:="Int NOT NULL")>  _
	Public Property IdRemision() As Integer
		Get
			Return Me._IdRemision
		End Get
		Set
			If ((Me._IdRemision = value)  _
						= false) Then
				Me._IdRemision = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sucursal")>  _
Partial Public Class Sucursal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdSucursal As Integer
	
	Private _Nombre As String
	
	Private _Telefono As String
	
	Private _Direccion As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdSucursalChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSucursalChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSucursal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdSucursal() As Integer
		Get
			Return Me._IdSucursal
		End Get
		Set
			If ((Me._IdSucursal = value)  _
						= false) Then
				Me.OnIdSucursalChanging(value)
				Me.SendPropertyChanging
				Me._IdSucursal = value
				Me.SendPropertyChanged("IdSucursal")
				Me.OnIdSucursalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(20)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(100)")>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Grupo")>  _
Partial Public Class Grupo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdGrupo As String
	
	Private _Descripcion As String
	
	Private _DetalleCompras As EntitySet(Of DetalleCompra)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdGrupoChanging(value As String)
    End Sub
    Partial Private Sub OnIdGrupoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DetalleCompras = New EntitySet(Of DetalleCompra)(AddressOf Me.attach_DetalleCompras, AddressOf Me.detach_DetalleCompras)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGrupo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdGrupo() As String
		Get
			Return Me._IdGrupo
		End Get
		Set
			If (String.Equals(Me._IdGrupo, value) = false) Then
				Me.OnIdGrupoChanging(value)
				Me.SendPropertyChanging
				Me._IdGrupo = value
				Me.SendPropertyChanged("IdGrupo")
				Me.OnIdGrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Grupo_DetalleCompra", Storage:="_DetalleCompras", ThisKey:="IdGrupo", OtherKey:="IdGrupo")>  _
	Public Property DetalleCompras() As EntitySet(Of DetalleCompra)
		Get
			Return Me._DetalleCompras
		End Get
		Set
			Me._DetalleCompras.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DetalleCompras(ByVal entity As DetalleCompra)
		Me.SendPropertyChanging
		entity.Grupo = Me
	End Sub
	
	Private Sub detach_DetalleCompras(ByVal entity As DetalleCompra)
		Me.SendPropertyChanging
		entity.Grupo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Categoria")>  _
Partial Public Class Categoria
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCategoria As String
	
	Private _Descripcion As String
	
	Private _IdGrupo As String
	
	Private _NextIdProd As System.Nullable(Of Integer)
	
	Private _DetalleCompras As EntitySet(Of DetalleCompra)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCategoriaChanging(value As String)
    End Sub
    Partial Private Sub OnIdCategoriaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnIdGrupoChanging(value As String)
    End Sub
    Partial Private Sub OnIdGrupoChanged()
    End Sub
    Partial Private Sub OnNextIdProdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNextIdProdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DetalleCompras = New EntitySet(Of DetalleCompra)(AddressOf Me.attach_DetalleCompras, AddressOf Me.detach_DetalleCompras)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategoria", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdCategoria() As String
		Get
			Return Me._IdCategoria
		End Get
		Set
			If (String.Equals(Me._IdCategoria, value) = false) Then
				Me.OnIdCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._IdCategoria = value
				Me.SendPropertyChanged("IdCategoria")
				Me.OnIdCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGrupo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property IdGrupo() As String
		Get
			Return Me._IdGrupo
		End Get
		Set
			If (String.Equals(Me._IdGrupo, value) = false) Then
				Me.OnIdGrupoChanging(value)
				Me.SendPropertyChanging
				Me._IdGrupo = value
				Me.SendPropertyChanged("IdGrupo")
				Me.OnIdGrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NextIdProd", DbType:="Int")>  _
	Public Property NextIdProd() As System.Nullable(Of Integer)
		Get
			Return Me._NextIdProd
		End Get
		Set
			If (Me._NextIdProd.Equals(value) = false) Then
				Me.OnNextIdProdChanging(value)
				Me.SendPropertyChanging
				Me._NextIdProd = value
				Me.SendPropertyChanged("NextIdProd")
				Me.OnNextIdProdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Categoria_DetalleCompra", Storage:="_DetalleCompras", ThisKey:="IdCategoria", OtherKey:="IdCategoria")>  _
	Public Property DetalleCompras() As EntitySet(Of DetalleCompra)
		Get
			Return Me._DetalleCompras
		End Get
		Set
			Me._DetalleCompras.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DetalleCompras(ByVal entity As DetalleCompra)
		Me.SendPropertyChanging
		entity.Categoria = Me
	End Sub
	
	Private Sub detach_DetalleCompras(ByVal entity As DetalleCompra)
		Me.SendPropertyChanging
		entity.Categoria = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Kardex")>  _
Partial Public Class Kardex
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodProducto As String
	
	Private _Fecha As Date
	
	Private _Inicial As Decimal
	
	Private _Entrada As Decimal
	
	Private _Salida As Decimal
	
	Private _Balance As Decimal
	
	Private _IdBodega As Integer
	
	Private _Referencia As String
	
	Private _IdKardex As Integer
	
	Private _Costo As System.Nullable(Of Decimal)
	
	Private _Bodegas As EntityRef(Of Bodegas)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodProductoChanging(value As String)
    End Sub
    Partial Private Sub OnCodProductoChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnInicialChanging(value As Decimal)
    End Sub
    Partial Private Sub OnInicialChanged()
    End Sub
    Partial Private Sub OnEntradaChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEntradaChanged()
    End Sub
    Partial Private Sub OnSalidaChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSalidaChanged()
    End Sub
    Partial Private Sub OnBalanceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnBalanceChanged()
    End Sub
    Partial Private Sub OnIdBodegaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBodegaChanged()
    End Sub
    Partial Private Sub OnReferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaChanged()
    End Sub
    Partial Private Sub OnIdKardexChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdKardexChanged()
    End Sub
    Partial Private Sub OnCostoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bodegas = CType(Nothing, EntityRef(Of Bodegas))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodProducto", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property CodProducto() As String
		Get
			Return Me._CodProducto
		End Get
		Set
			If (String.Equals(Me._CodProducto, value) = false) Then
				Me.OnCodProductoChanging(value)
				Me.SendPropertyChanging
				Me._CodProducto = value
				Me.SendPropertyChanged("CodProducto")
				Me.OnCodProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inicial", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property Inicial() As Decimal
		Get
			Return Me._Inicial
		End Get
		Set
			If ((Me._Inicial = value)  _
						= false) Then
				Me.OnInicialChanging(value)
				Me.SendPropertyChanging
				Me._Inicial = value
				Me.SendPropertyChanged("Inicial")
				Me.OnInicialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Entrada", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property Entrada() As Decimal
		Get
			Return Me._Entrada
		End Get
		Set
			If ((Me._Entrada = value)  _
						= false) Then
				Me.OnEntradaChanging(value)
				Me.SendPropertyChanging
				Me._Entrada = value
				Me.SendPropertyChanged("Entrada")
				Me.OnEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salida", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property Salida() As Decimal
		Get
			Return Me._Salida
		End Get
		Set
			If ((Me._Salida = value)  _
						= false) Then
				Me.OnSalidaChanging(value)
				Me.SendPropertyChanging
				Me._Salida = value
				Me.SendPropertyChanged("Salida")
				Me.OnSalidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Balance", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property Balance() As Decimal
		Get
			Return Me._Balance
		End Get
		Set
			If ((Me._Balance = value)  _
						= false) Then
				Me.OnBalanceChanging(value)
				Me.SendPropertyChanging
				Me._Balance = value
				Me.SendPropertyChanged("Balance")
				Me.OnBalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBodega", DbType:="Int NOT NULL")>  _
	Public Property IdBodega() As Integer
		Get
			Return Me._IdBodega
		End Get
		Set
			If ((Me._IdBodega = value)  _
						= false) Then
				If Me._Bodegas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBodegaChanging(value)
				Me.SendPropertyChanging
				Me._IdBodega = value
				Me.SendPropertyChanged("IdBodega")
				Me.OnIdBodegaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Referencia", DbType:="VarChar(50)")>  _
	Public Property Referencia() As String
		Get
			Return Me._Referencia
		End Get
		Set
			If (String.Equals(Me._Referencia, value) = false) Then
				Me.OnReferenciaChanging(value)
				Me.SendPropertyChanging
				Me._Referencia = value
				Me.SendPropertyChanged("Referencia")
				Me.OnReferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdKardex", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdKardex() As Integer
		Get
			Return Me._IdKardex
		End Get
		Set
			If ((Me._IdKardex = value)  _
						= false) Then
				Me.OnIdKardexChanging(value)
				Me.SendPropertyChanging
				Me._IdKardex = value
				Me.SendPropertyChanged("IdKardex")
				Me.OnIdKardexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Costo", DbType:="Decimal(12,2)")>  _
	Public Property Costo() As System.Nullable(Of Decimal)
		Get
			Return Me._Costo
		End Get
		Set
			If (Me._Costo.Equals(value) = false) Then
				Me.OnCostoChanging(value)
				Me.SendPropertyChanging
				Me._Costo = value
				Me.SendPropertyChanged("Costo")
				Me.OnCostoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bodegas_Kardex", Storage:="_Bodegas", ThisKey:="IdBodega", OtherKey:="IdBodega", IsForeignKey:=true)>  _
	Public Property Bodegas() As Bodegas
		Get
			Return Me._Bodegas.Entity
		End Get
		Set
			Dim previousValue As Bodegas = Me._Bodegas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bodegas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bodegas.Entity = Nothing
					previousValue.Kardex.Remove(Me)
				End If
				Me._Bodegas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Kardex.Add(Me)
					Me._IdBodega = value.IdBodega
				Else
					Me._IdBodega = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Bodegas")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ViewRemision")>  _
Partial Public Class ViewRemision
	
	Private _Grupo As String
	
	Private _IdUnidadM As String
	
	Private _Categoria As String
	
	Private _Nombre As String
	
	Private _Cantidad As Decimal
	
	Private _PUnt As Decimal
	
	Private _Valor As Decimal
	
	Private _Sucursal As String
	
	Private _Fecha As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grupo", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Grupo() As String
		Get
			Return Me._Grupo
		End Get
		Set
			If (String.Equals(Me._Grupo, value) = false) Then
				Me._Grupo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnidadM", DbType:="VarChar(50)", CanBeNull:=false)>  _
	Public Property IdUnidadM() As String
		Get
			Return Me._IdUnidadM
		End Get
		Set
			If (String.Equals(Me._IdUnidadM, value) = false) Then
				Me._IdUnidadM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Categoria", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Categoria() As String
		Get
			Return Me._Categoria
		End Get
		Set
			If (String.Equals(Me._Categoria, value) = false) Then
				Me._Categoria = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100)", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me._Nombre = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(12,2)")>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me._Cantidad = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PUnt", DbType:="Decimal(12,2)")>  _
	Public Property PUnt() As Decimal
		Get
			Return Me._PUnt
		End Get
		Set
			If ((Me._PUnt = value)  _
						= false) Then
				Me._PUnt = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="Decimal(25,4)")>  _
	Public Property Valor() As Decimal
		Get
			Return Me._Valor
		End Get
		Set
			If ((Me._Valor = value)  _
						= false) Then
				Me._Valor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sucursal", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Sucursal() As String
		Get
			Return Me._Sucursal
		End Get
		Set
			If (String.Equals(Me._Sucursal, value) = false) Then
				Me._Sucursal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me._Fecha = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VistaProd")>  _
Partial Public Class VistaProd
	
	Private _CodProducto As String
	
	Private _Nombre As String
	
	Private _UdidadM As String
	
	Private _Costo As Decimal
	
	Private _Bodega As String
	
	Private _Existencia As Decimal
	
	Private _Total As Decimal
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodProducto", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property CodProducto() As String
		Get
			Return Me._CodProducto
		End Get
		Set
			If (String.Equals(Me._CodProducto, value) = false) Then
				Me._CodProducto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me._Nombre = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UdidadM", DbType:="VarChar(50)", CanBeNull:=false)>  _
	Public Property UdidadM() As String
		Get
			Return Me._UdidadM
		End Get
		Set
			If (String.Equals(Me._UdidadM, value) = false) Then
				Me._UdidadM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Costo", DbType:="Decimal(12,2)")>  _
	Public Property Costo() As Decimal
		Get
			Return Me._Costo
		End Get
		Set
			If ((Me._Costo = value)  _
						= false) Then
				Me._Costo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bodega", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Bodega() As String
		Get
			Return Me._Bodega
		End Get
		Set
			If (String.Equals(Me._Bodega, value) = false) Then
				Me._Bodega = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Existencia", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property Existencia() As Decimal
		Get
			Return Me._Existencia
		End Get
		Set
			If ((Me._Existencia = value)  _
						= false) Then
				Me._Existencia = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(25,4)")>  _
	Public Property Total() As Decimal
		Get
			Return Me._Total
		End Get
		Set
			If ((Me._Total = value)  _
						= false) Then
				Me._Total = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor")>  _
Partial Public Class Proveedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdProveedor As Integer
	
	Private _NumRuc As String
	
	Private _Nombre As String
	
	Private _FCrea As System.Nullable(Of Date)
	
	Private _Direccion As String
	
	Private _Telefono As String
	
	Private _Codigo As String
	
	Private _Compra As EntitySet(Of Compra)
	
	Private _DetalleCompras As EntitySet(Of DetalleCompra)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProveedorChanged()
    End Sub
    Partial Private Sub OnNumRucChanging(value As String)
    End Sub
    Partial Private Sub OnNumRucChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnFCreaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFCreaChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Compra = New EntitySet(Of Compra)(AddressOf Me.attach_Compra, AddressOf Me.detach_Compra)
		Me._DetalleCompras = New EntitySet(Of DetalleCompra)(AddressOf Me.attach_DetalleCompras, AddressOf Me.detach_DetalleCompras)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdProveedor() As Integer
		Get
			Return Me._IdProveedor
		End Get
		Set
			If ((Me._IdProveedor = value)  _
						= false) Then
				Me.OnIdProveedorChanging(value)
				Me.SendPropertyChanging
				Me._IdProveedor = value
				Me.SendPropertyChanged("IdProveedor")
				Me.OnIdProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumRuc", DbType:="VarChar(50)")>  _
	Public Property NumRuc() As String
		Get
			Return Me._NumRuc
		End Get
		Set
			If (String.Equals(Me._NumRuc, value) = false) Then
				Me.OnNumRucChanging(value)
				Me.SendPropertyChanging
				Me._NumRuc = value
				Me.SendPropertyChanged("NumRuc")
				Me.OnNumRucChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(50)")>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FCrea", DbType:="Date")>  _
	Public Property FCrea() As System.Nullable(Of Date)
		Get
			Return Me._FCrea
		End Get
		Set
			If (Me._FCrea.Equals(value) = false) Then
				Me.OnFCreaChanging(value)
				Me.SendPropertyChanging
				Me._FCrea = value
				Me.SendPropertyChanged("FCrea")
				Me.OnFCreaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(200)")>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(20)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="VarChar(50)")>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Compra", Storage:="_Compra", ThisKey:="IdProveedor", OtherKey:="IdProveedor")>  _
	Public Property Compra() As EntitySet(Of Compra)
		Get
			Return Me._Compra
		End Get
		Set
			Me._Compra.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_DetalleCompra", Storage:="_DetalleCompras", ThisKey:="IdProveedor", OtherKey:="IdProveedor")>  _
	Public Property DetalleCompras() As EntitySet(Of DetalleCompra)
		Get
			Return Me._DetalleCompras
		End Get
		Set
			Me._DetalleCompras.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Compra(ByVal entity As Compra)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Compra(ByVal entity As Compra)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_DetalleCompras(ByVal entity As DetalleCompra)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_DetalleCompras(ByVal entity As DetalleCompra)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Productos")>  _
Partial Public Class Productos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodProducto As String
	
	Private _Nombre As String
	
	Private _IdUnidad As Integer
	
	Private _IdGrupo As String
	
	Private _IdCategoria As String
	
	Private _UltPrecioC As System.Nullable(Of Decimal)
	
	Private _Costo As System.Nullable(Of Decimal)
	
	Private _Remision2 As EntitySet(Of Remision2)
	
	Private _DetaRemision As EntitySet(Of DetaRemision)
	
	Private _DetalleCompras As EntitySet(Of DetalleCompra)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodProductoChanging(value As String)
    End Sub
    Partial Private Sub OnCodProductoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnIdUnidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUnidadChanged()
    End Sub
    Partial Private Sub OnIdGrupoChanging(value As String)
    End Sub
    Partial Private Sub OnIdGrupoChanged()
    End Sub
    Partial Private Sub OnIdCategoriaChanging(value As String)
    End Sub
    Partial Private Sub OnIdCategoriaChanged()
    End Sub
    Partial Private Sub OnUltPrecioCChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUltPrecioCChanged()
    End Sub
    Partial Private Sub OnCostoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Remision2 = New EntitySet(Of Remision2)(AddressOf Me.attach_Remision2, AddressOf Me.detach_Remision2)
		Me._DetaRemision = New EntitySet(Of DetaRemision)(AddressOf Me.attach_DetaRemision, AddressOf Me.detach_DetaRemision)
		Me._DetalleCompras = New EntitySet(Of DetalleCompra)(AddressOf Me.attach_DetalleCompras, AddressOf Me.detach_DetalleCompras)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodProducto", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodProducto() As String
		Get
			Return Me._CodProducto
		End Get
		Set
			If (String.Equals(Me._CodProducto, value) = false) Then
				Me.OnCodProductoChanging(value)
				Me.SendPropertyChanging
				Me._CodProducto = value
				Me.SendPropertyChanged("CodProducto")
				Me.OnCodProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnidad", DbType:="Int NOT NULL")>  _
	Public Property IdUnidad() As Integer
		Get
			Return Me._IdUnidad
		End Get
		Set
			If ((Me._IdUnidad = value)  _
						= false) Then
				Me.OnIdUnidadChanging(value)
				Me.SendPropertyChanging
				Me._IdUnidad = value
				Me.SendPropertyChanged("IdUnidad")
				Me.OnIdUnidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGrupo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property IdGrupo() As String
		Get
			Return Me._IdGrupo
		End Get
		Set
			If (String.Equals(Me._IdGrupo, value) = false) Then
				Me.OnIdGrupoChanging(value)
				Me.SendPropertyChanging
				Me._IdGrupo = value
				Me.SendPropertyChanged("IdGrupo")
				Me.OnIdGrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategoria", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property IdCategoria() As String
		Get
			Return Me._IdCategoria
		End Get
		Set
			If (String.Equals(Me._IdCategoria, value) = false) Then
				Me.OnIdCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._IdCategoria = value
				Me.SendPropertyChanged("IdCategoria")
				Me.OnIdCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UltPrecioC", DbType:="Decimal(12,2)")>  _
	Public Property UltPrecioC() As System.Nullable(Of Decimal)
		Get
			Return Me._UltPrecioC
		End Get
		Set
			If (Me._UltPrecioC.Equals(value) = false) Then
				Me.OnUltPrecioCChanging(value)
				Me.SendPropertyChanging
				Me._UltPrecioC = value
				Me.SendPropertyChanged("UltPrecioC")
				Me.OnUltPrecioCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Costo", DbType:="Decimal(12,2)")>  _
	Public Property Costo() As System.Nullable(Of Decimal)
		Get
			Return Me._Costo
		End Get
		Set
			If (Me._Costo.Equals(value) = false) Then
				Me.OnCostoChanging(value)
				Me.SendPropertyChanging
				Me._Costo = value
				Me.SendPropertyChanged("Costo")
				Me.OnCostoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Productos_Remision2", Storage:="_Remision2", ThisKey:="CodProducto", OtherKey:="Codproducto")>  _
	Public Property Remision2() As EntitySet(Of Remision2)
		Get
			Return Me._Remision2
		End Get
		Set
			Me._Remision2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Productos_DetaRemision", Storage:="_DetaRemision", ThisKey:="CodProducto", OtherKey:="CodProducto")>  _
	Public Property DetaRemision() As EntitySet(Of DetaRemision)
		Get
			Return Me._DetaRemision
		End Get
		Set
			Me._DetaRemision.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Productos_DetalleCompra", Storage:="_DetalleCompras", ThisKey:="CodProducto", OtherKey:="Codigo")>  _
	Public Property DetalleCompras() As EntitySet(Of DetalleCompra)
		Get
			Return Me._DetalleCompras
		End Get
		Set
			Me._DetalleCompras.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Remision2(ByVal entity As Remision2)
		Me.SendPropertyChanging
		entity.Productos = Me
	End Sub
	
	Private Sub detach_Remision2(ByVal entity As Remision2)
		Me.SendPropertyChanging
		entity.Productos = Nothing
	End Sub
	
	Private Sub attach_DetaRemision(ByVal entity As DetaRemision)
		Me.SendPropertyChanging
		entity.Productos = Me
	End Sub
	
	Private Sub detach_DetaRemision(ByVal entity As DetaRemision)
		Me.SendPropertyChanging
		entity.Productos = Nothing
	End Sub
	
	Private Sub attach_DetalleCompras(ByVal entity As DetalleCompra)
		Me.SendPropertyChanging
		entity.Productos = Me
	End Sub
	
	Private Sub detach_DetalleCompras(ByVal entity As DetalleCompra)
		Me.SendPropertyChanging
		entity.Productos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class RptRemsion
	
	Private _Sucursal As String
	
	Private _Codproducto As String
	
	Private _Descripcion As String
	
	Private _Enviado As Decimal
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sucursal", CanBeNull:=false)>  _
	Public Property Sucursal() As String
		Get
			Return Me._Sucursal
		End Get
		Set
			If (String.Equals(Me._Sucursal, value) = false) Then
				Me._Sucursal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codproducto", CanBeNull:=false)>  _
	Public Property Codproducto() As String
		Get
			Return Me._Codproducto
		End Get
		Set
			If (String.Equals(Me._Codproducto, value) = false) Then
				Me._Codproducto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me._Descripcion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enviado")>  _
	Public Property Enviado() As Decimal
		Get
			Return Me._Enviado
		End Get
		Set
			If ((Me._Enviado = value)  _
						= false) Then
				Me._Enviado = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class ViewProveedor
	
	Private _NumFactura As String
	
	Private _CodProducto As String
	
	Private _Descripcion As String
	
	Private _UM As String
	
	Private _Cantidad As Decimal
	
	Private _Precio As Decimal
	
	Private _Importe As Decimal
	
	Private _Iva As Decimal
	
	Private _Total As Decimal
	
	Private _Proveedor As String
	
	Private _NoFact As String
	
	Private _Fecha As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumFactura", CanBeNull:=false)>  _
	Public Property NumFactura() As String
		Get
			Return Me._NumFactura
		End Get
		Set
			If (String.Equals(Me._NumFactura, value) = false) Then
				Me._NumFactura = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodProducto", CanBeNull:=false)>  _
	Public Property CodProducto() As String
		Get
			Return Me._CodProducto
		End Get
		Set
			If (String.Equals(Me._CodProducto, value) = false) Then
				Me._CodProducto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me._Descripcion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UM", CanBeNull:=false)>  _
	Public Property UM() As String
		Get
			Return Me._UM
		End Get
		Set
			If (String.Equals(Me._UM, value) = false) Then
				Me._UM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad")>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me._Cantidad = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio")>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me._Precio = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe")>  _
	Public Property Importe() As Decimal
		Get
			Return Me._Importe
		End Get
		Set
			If ((Me._Importe = value)  _
						= false) Then
				Me._Importe = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Iva")>  _
	Public Property Iva() As Decimal
		Get
			Return Me._Iva
		End Get
		Set
			If ((Me._Iva = value)  _
						= false) Then
				Me._Iva = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total")>  _
	Public Property Total() As Decimal
		Get
			Return Me._Total
		End Get
		Set
			If ((Me._Total = value)  _
						= false) Then
				Me._Total = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor", CanBeNull:=false)>  _
	Public Property Proveedor() As String
		Get
			Return Me._Proveedor
		End Get
		Set
			If (String.Equals(Me._Proveedor, value) = false) Then
				Me._Proveedor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoFact", CanBeNull:=false)>  _
	Public Property NoFact() As String
		Get
			Return Me._NoFact
		End Get
		Set
			If (String.Equals(Me._NoFact, value) = false) Then
				Me._NoFact = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me._Fecha = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Compra")>  _
Partial Public Class Compra
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NumFac As String
	
	Private _Fecha As Date
	
	Private _Total As Decimal
	
	Private _IdProveedor As Integer
	
	Private _Iva As Decimal
	
	Private _Referencia As String
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNumFacChanging(value As String)
    End Sub
    Partial Private Sub OnNumFacChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnIdProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProveedorChanged()
    End Sub
    Partial Private Sub OnIvaChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIvaChanged()
    End Sub
    Partial Private Sub OnReferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumFac", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property NumFac() As String
		Get
			Return Me._NumFac
		End Get
		Set
			If (String.Equals(Me._NumFac, value) = false) Then
				Me.OnNumFacChanging(value)
				Me.SendPropertyChanging
				Me._NumFac = value
				Me.SendPropertyChanged("NumFac")
				Me.OnNumFacChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property Total() As Decimal
		Get
			Return Me._Total
		End Get
		Set
			If ((Me._Total = value)  _
						= false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProveedor", DbType:="Int")>  _
	Public Property IdProveedor() As Integer
		Get
			Return Me._IdProveedor
		End Get
		Set
			If ((Me._IdProveedor = value)  _
						= false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdProveedorChanging(value)
				Me.SendPropertyChanging
				Me._IdProveedor = value
				Me.SendPropertyChanged("IdProveedor")
				Me.OnIdProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Iva", DbType:="Decimal(12,2)")>  _
	Public Property Iva() As Decimal
		Get
			Return Me._Iva
		End Get
		Set
			If ((Me._Iva = value)  _
						= false) Then
				Me.OnIvaChanging(value)
				Me.SendPropertyChanging
				Me._Iva = value
				Me.SendPropertyChanged("Iva")
				Me.OnIvaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Referencia", DbType:="VarChar(50)", CanBeNull:=false)>  _
	Public Property Referencia() As String
		Get
			Return Me._Referencia
		End Get
		Set
			If (String.Equals(Me._Referencia, value) = false) Then
				Me.OnReferenciaChanging(value)
				Me.SendPropertyChanging
				Me._Referencia = value
				Me.SendPropertyChanged("Referencia")
				Me.OnReferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Compra", Storage:="_Proveedor", ThisKey:="IdProveedor", OtherKey:="IdProveedor", IsForeignKey:=true, DeleteRule:="SET NULL")>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Compra.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Compra.Add(Me)
					Me._IdProveedor = value.IdProveedor
				Else
					Me._IdProveedor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Remision2")>  _
Partial Public Class Remision2
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Codproducto As String
	
	Private _Descripcion As String
	
	Private _Enviado As Decimal
	
	Private _Consecutivo As Decimal
	
	Private _Numremsion As String
	
	Private _UnidadM As String
	
	Private _Productos As EntityRef(Of Productos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodproductoChanging(value As String)
    End Sub
    Partial Private Sub OnCodproductoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnEnviadoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEnviadoChanged()
    End Sub
    Partial Private Sub OnConsecutivoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnConsecutivoChanged()
    End Sub
    Partial Private Sub OnNumremsionChanging(value As String)
    End Sub
    Partial Private Sub OnNumremsionChanged()
    End Sub
    Partial Private Sub OnUnidadMChanging(value As String)
    End Sub
    Partial Private Sub OnUnidadMChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Productos = CType(Nothing, EntityRef(Of Productos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codproducto", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Codproducto() As String
		Get
			Return Me._Codproducto
		End Get
		Set
			If (String.Equals(Me._Codproducto, value) = false) Then
				If Me._Productos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCodproductoChanging(value)
				Me.SendPropertyChanging
				Me._Codproducto = value
				Me.SendPropertyChanged("Codproducto")
				Me.OnCodproductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enviado", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property Enviado() As Decimal
		Get
			Return Me._Enviado
		End Get
		Set
			If ((Me._Enviado = value)  _
						= false) Then
				Me.OnEnviadoChanging(value)
				Me.SendPropertyChanging
				Me._Enviado = value
				Me.SendPropertyChanged("Enviado")
				Me.OnEnviadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Consecutivo", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Consecutivo() As Decimal
		Get
			Return Me._Consecutivo
		End Get
		Set
			If ((Me._Consecutivo = value)  _
						= false) Then
				Me.OnConsecutivoChanging(value)
				Me.SendPropertyChanging
				Me._Consecutivo = value
				Me.SendPropertyChanged("Consecutivo")
				Me.OnConsecutivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numremsion", DbType:="VarChar(20)")>  _
	Public Property Numremsion() As String
		Get
			Return Me._Numremsion
		End Get
		Set
			If (String.Equals(Me._Numremsion, value) = false) Then
				Me.OnNumremsionChanging(value)
				Me.SendPropertyChanging
				Me._Numremsion = value
				Me.SendPropertyChanged("Numremsion")
				Me.OnNumremsionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnidadM", DbType:="VarChar(10)")>  _
	Public Property UnidadM() As String
		Get
			Return Me._UnidadM
		End Get
		Set
			If (String.Equals(Me._UnidadM, value) = false) Then
				Me.OnUnidadMChanging(value)
				Me.SendPropertyChanging
				Me._UnidadM = value
				Me.SendPropertyChanged("UnidadM")
				Me.OnUnidadMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Productos_Remision2", Storage:="_Productos", ThisKey:="Codproducto", OtherKey:="CodProducto", IsForeignKey:=true, DeleteRule:="SET DEFAULT")>  _
	Public Property Productos() As Productos
		Get
			Return Me._Productos.Entity
		End Get
		Set
			Dim previousValue As Productos = Me._Productos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Productos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Productos.Entity = Nothing
					previousValue.Remision2.Remove(Me)
				End If
				Me._Productos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Remision2.Add(Me)
					Me._Codproducto = value.CodProducto
				Else
					Me._Codproducto = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Productos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class VistaDetaProd
	
	Private _NumFactura As String
	
	Private _CodProducto As String
	
	Private _Descripcion As String
	
	Private _UM As String
	
	Private _Cantidad As Decimal
	
	Private _Precio As Decimal
	
	Private _Importe As Decimal
	
	Private _Fecha As Date
	
	Private _Proveedor As String
	
	Private _Factura As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumFactura", CanBeNull:=false)>  _
	Public Property NumFactura() As String
		Get
			Return Me._NumFactura
		End Get
		Set
			If (String.Equals(Me._NumFactura, value) = false) Then
				Me._NumFactura = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodProducto", CanBeNull:=false)>  _
	Public Property CodProducto() As String
		Get
			Return Me._CodProducto
		End Get
		Set
			If (String.Equals(Me._CodProducto, value) = false) Then
				Me._CodProducto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me._Descripcion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UM", CanBeNull:=false)>  _
	Public Property UM() As String
		Get
			Return Me._UM
		End Get
		Set
			If (String.Equals(Me._UM, value) = false) Then
				Me._UM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad")>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me._Cantidad = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio")>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me._Precio = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe")>  _
	Public Property Importe() As Decimal
		Get
			Return Me._Importe
		End Get
		Set
			If ((Me._Importe = value)  _
						= false) Then
				Me._Importe = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me._Fecha = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor", CanBeNull:=false)>  _
	Public Property Proveedor() As String
		Get
			Return Me._Proveedor
		End Get
		Set
			If (String.Equals(Me._Proveedor, value) = false) Then
				Me._Proveedor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Factura", CanBeNull:=false)>  _
	Public Property Factura() As String
		Get
			Return Me._Factura
		End Get
		Set
			If (String.Equals(Me._Factura, value) = false) Then
				Me._Factura = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DetaBodega")>  _
Partial Public Class DetaBodega
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodProducto As String
	
	Private _IdBodega As Integer
	
	Private _Existencia As Decimal
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodProductoChanging(value As String)
    End Sub
    Partial Private Sub OnCodProductoChanged()
    End Sub
    Partial Private Sub OnIdBodegaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBodegaChanged()
    End Sub
    Partial Private Sub OnExistenciaChanging(value As Decimal)
    End Sub
    Partial Private Sub OnExistenciaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodProducto", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodProducto() As String
		Get
			Return Me._CodProducto
		End Get
		Set
			If (String.Equals(Me._CodProducto, value) = false) Then
				Me.OnCodProductoChanging(value)
				Me.SendPropertyChanging
				Me._CodProducto = value
				Me.SendPropertyChanged("CodProducto")
				Me.OnCodProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBodega", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdBodega() As Integer
		Get
			Return Me._IdBodega
		End Get
		Set
			If ((Me._IdBodega = value)  _
						= false) Then
				Me.OnIdBodegaChanging(value)
				Me.SendPropertyChanging
				Me._IdBodega = value
				Me.SendPropertyChanged("IdBodega")
				Me.OnIdBodegaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Existencia", DbType:="Decimal(12,3) NOT NULL")>  _
	Public Property Existencia() As Decimal
		Get
			Return Me._Existencia
		End Get
		Set
			If ((Me._Existencia = value)  _
						= false) Then
				Me.OnExistenciaChanging(value)
				Me.SendPropertyChanging
				Me._Existencia = value
				Me.SendPropertyChanged("Existencia")
				Me.OnExistenciaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bodegas")>  _
Partial Public Class Bodegas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBodega As Integer
	
	Private _Nombre As String
	
	Private _Kardex As EntitySet(Of Kardex)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBodegaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBodegaChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Kardex = New EntitySet(Of Kardex)(AddressOf Me.attach_Kardex, AddressOf Me.detach_Kardex)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBodega", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdBodega() As Integer
		Get
			Return Me._IdBodega
		End Get
		Set
			If ((Me._IdBodega = value)  _
						= false) Then
				Me.OnIdBodegaChanging(value)
				Me.SendPropertyChanging
				Me._IdBodega = value
				Me.SendPropertyChanged("IdBodega")
				Me.OnIdBodegaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bodegas_Kardex", Storage:="_Kardex", ThisKey:="IdBodega", OtherKey:="IdBodega")>  _
	Public Property Kardex() As EntitySet(Of Kardex)
		Get
			Return Me._Kardex
		End Get
		Set
			Me._Kardex.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Kardex(ByVal entity As Kardex)
		Me.SendPropertyChanging
		entity.Bodegas = Me
	End Sub
	
	Private Sub detach_Kardex(ByVal entity As Kardex)
		Me.SendPropertyChanging
		entity.Bodegas = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Remision")>  _
Partial Public Class Remision
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdRemision As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _IdSucursal As System.Nullable(Of Integer)
	
	Private _Observacion As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdRemisionChanging(value As String)
    End Sub
    Partial Private Sub OnIdRemisionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnIdSucursalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSucursalChanged()
    End Sub
    Partial Private Sub OnObservacionChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdRemision", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdRemision() As String
		Get
			Return Me._IdRemision
		End Get
		Set
			If (String.Equals(Me._IdRemision, value) = false) Then
				Me.OnIdRemisionChanging(value)
				Me.SendPropertyChanging
				Me._IdRemision = value
				Me.SendPropertyChanged("IdRemision")
				Me.OnIdRemisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSucursal", DbType:="Int")>  _
	Public Property IdSucursal() As System.Nullable(Of Integer)
		Get
			Return Me._IdSucursal
		End Get
		Set
			If (Me._IdSucursal.Equals(value) = false) Then
				Me.OnIdSucursalChanging(value)
				Me.SendPropertyChanging
				Me._IdSucursal = value
				Me.SendPropertyChanged("IdSucursal")
				Me.OnIdSucursalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observacion", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observacion() As String
		Get
			Return Me._Observacion
		End Get
		Set
			If (String.Equals(Me._Observacion, value) = false) Then
				Me.OnObservacionChanging(value)
				Me.SendPropertyChanging
				Me._Observacion = value
				Me.SendPropertyChanged("Observacion")
				Me.OnObservacionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DetaRemision")>  _
Partial Public Class DetaRemision
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdRemision As String
	
	Private _CodProducto As String
	
	Private _Nombre As String
	
	Private _Cantidad As Decimal
	
	Private _Fecha As Date
	
	Private _Productos As EntityRef(Of Productos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdRemisionChanging(value As String)
    End Sub
    Partial Private Sub OnIdRemisionChanged()
    End Sub
    Partial Private Sub OnCodProductoChanging(value As String)
    End Sub
    Partial Private Sub OnCodProductoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Productos = CType(Nothing, EntityRef(Of Productos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdRemision", DbType:="VarChar(580) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdRemision() As String
		Get
			Return Me._IdRemision
		End Get
		Set
			If (String.Equals(Me._IdRemision, value) = false) Then
				Me.OnIdRemisionChanging(value)
				Me.SendPropertyChanging
				Me._IdRemision = value
				Me.SendPropertyChanged("IdRemision")
				Me.OnIdRemisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodProducto", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodProducto() As String
		Get
			Return Me._CodProducto
		End Get
		Set
			If (String.Equals(Me._CodProducto, value) = false) Then
				If Me._Productos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCodProductoChanging(value)
				Me.SendPropertyChanging
				Me._CodProducto = value
				Me.SendPropertyChanged("CodProducto")
				Me.OnCodProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(18,3) NOT NULL")>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Productos_DetaRemision", Storage:="_Productos", ThisKey:="CodProducto", OtherKey:="CodProducto", IsForeignKey:=true)>  _
	Public Property Productos() As Productos
		Get
			Return Me._Productos.Entity
		End Get
		Set
			Dim previousValue As Productos = Me._Productos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Productos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Productos.Entity = Nothing
					previousValue.DetaRemision.Remove(Me)
				End If
				Me._Productos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetaRemision.Add(Me)
					Me._CodProducto = value.CodProducto
				Else
					Me._CodProducto = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Productos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DetalleCompra")>  _
Partial Public Class DetalleCompra
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NumFactura As String
	
	Private _Consecutivo As Integer
	
	Private _Codigo As String
	
	Private _Nombre As String
	
	Private _Cantidad As Decimal
	
	Private _UnidadM As String
	
	Private _PrecioC As Decimal
	
	Private _Fecha As Date
	
	Private _IdCategoria As String
	
	Private _IdGrupo As String
	
	Private _IdProveedor As Integer
	
	Private _Categoria As EntityRef(Of Categoria)
	
	Private _Grupo As EntityRef(Of Grupo)
	
	Private _Productos As EntityRef(Of Productos)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNumFacturaChanging(value As String)
    End Sub
    Partial Private Sub OnNumFacturaChanged()
    End Sub
    Partial Private Sub OnConsecutivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnConsecutivoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnUnidadMChanging(value As String)
    End Sub
    Partial Private Sub OnUnidadMChanged()
    End Sub
    Partial Private Sub OnPrecioCChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioCChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnIdCategoriaChanging(value As String)
    End Sub
    Partial Private Sub OnIdCategoriaChanged()
    End Sub
    Partial Private Sub OnIdGrupoChanging(value As String)
    End Sub
    Partial Private Sub OnIdGrupoChanged()
    End Sub
    Partial Private Sub OnIdProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProveedorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Categoria = CType(Nothing, EntityRef(Of Categoria))
		Me._Grupo = CType(Nothing, EntityRef(Of Grupo))
		Me._Productos = CType(Nothing, EntityRef(Of Productos))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumFactura", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property NumFactura() As String
		Get
			Return Me._NumFactura
		End Get
		Set
			If (String.Equals(Me._NumFactura, value) = false) Then
				Me.OnNumFacturaChanging(value)
				Me.SendPropertyChanging
				Me._NumFactura = value
				Me.SendPropertyChanged("NumFactura")
				Me.OnNumFacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Consecutivo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Consecutivo() As Integer
		Get
			Return Me._Consecutivo
		End Get
		Set
			If ((Me._Consecutivo = value)  _
						= false) Then
				Me.OnConsecutivoChanging(value)
				Me.SendPropertyChanging
				Me._Consecutivo = value
				Me.SendPropertyChanged("Consecutivo")
				Me.OnConsecutivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				If Me._Productos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(12,3) NOT NULL")>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnidadM", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property UnidadM() As String
		Get
			Return Me._UnidadM
		End Get
		Set
			If (String.Equals(Me._UnidadM, value) = false) Then
				Me.OnUnidadMChanging(value)
				Me.SendPropertyChanging
				Me._UnidadM = value
				Me.SendPropertyChanged("UnidadM")
				Me.OnUnidadMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrecioC", DbType:="Decimal(12,3) NOT NULL")>  _
	Public Property PrecioC() As Decimal
		Get
			Return Me._PrecioC
		End Get
		Set
			If ((Me._PrecioC = value)  _
						= false) Then
				Me.OnPrecioCChanging(value)
				Me.SendPropertyChanging
				Me._PrecioC = value
				Me.SendPropertyChanged("PrecioC")
				Me.OnPrecioCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategoria", DbType:="VarChar(20)", CanBeNull:=false)>  _
	Public Property IdCategoria() As String
		Get
			Return Me._IdCategoria
		End Get
		Set
			If (String.Equals(Me._IdCategoria, value) = false) Then
				If Me._Categoria.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._IdCategoria = value
				Me.SendPropertyChanged("IdCategoria")
				Me.OnIdCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGrupo", DbType:="VarChar(20)", CanBeNull:=false)>  _
	Public Property IdGrupo() As String
		Get
			Return Me._IdGrupo
		End Get
		Set
			If (String.Equals(Me._IdGrupo, value) = false) Then
				If Me._Grupo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdGrupoChanging(value)
				Me.SendPropertyChanging
				Me._IdGrupo = value
				Me.SendPropertyChanged("IdGrupo")
				Me.OnIdGrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProveedor", DbType:="Int")>  _
	Public Property IdProveedor() As Integer
		Get
			Return Me._IdProveedor
		End Get
		Set
			If ((Me._IdProveedor = value)  _
						= false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdProveedorChanging(value)
				Me.SendPropertyChanging
				Me._IdProveedor = value
				Me.SendPropertyChanged("IdProveedor")
				Me.OnIdProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Categoria_DetalleCompra", Storage:="_Categoria", ThisKey:="IdCategoria", OtherKey:="IdCategoria", IsForeignKey:=true)>  _
	Public Property Categoria() As Categoria
		Get
			Return Me._Categoria.Entity
		End Get
		Set
			Dim previousValue As Categoria = Me._Categoria.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Categoria.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Categoria.Entity = Nothing
					previousValue.DetalleCompras.Remove(Me)
				End If
				Me._Categoria.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetalleCompras.Add(Me)
					Me._IdCategoria = value.IdCategoria
				Else
					Me._IdCategoria = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Categoria")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Grupo_DetalleCompra", Storage:="_Grupo", ThisKey:="IdGrupo", OtherKey:="IdGrupo", IsForeignKey:=true)>  _
	Public Property Grupo() As Grupo
		Get
			Return Me._Grupo.Entity
		End Get
		Set
			Dim previousValue As Grupo = Me._Grupo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Grupo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Grupo.Entity = Nothing
					previousValue.DetalleCompras.Remove(Me)
				End If
				Me._Grupo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetalleCompras.Add(Me)
					Me._IdGrupo = value.IdGrupo
				Else
					Me._IdGrupo = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Grupo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Productos_DetalleCompra", Storage:="_Productos", ThisKey:="Codigo", OtherKey:="CodProducto", IsForeignKey:=true, DeleteRule:="SET DEFAULT")>  _
	Public Property Productos() As Productos
		Get
			Return Me._Productos.Entity
		End Get
		Set
			Dim previousValue As Productos = Me._Productos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Productos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Productos.Entity = Nothing
					previousValue.DetalleCompras.Remove(Me)
				End If
				Me._Productos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetalleCompras.Add(Me)
					Me._Codigo = value.CodProducto
				Else
					Me._Codigo = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Productos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_DetalleCompra", Storage:="_Proveedor", ThisKey:="IdProveedor", OtherKey:="IdProveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.DetalleCompras.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetalleCompras.Add(Me)
					Me._IdProveedor = value.IdProveedor
				Else
					Me._IdProveedor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class filtrarGrupoResult
	
	Private _IdGrupo As String
	
	Private _Descripcion As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGrupo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property IdGrupo() As String
		Get
			Return Me._IdGrupo
		End Get
		Set
			If (String.Equals(Me._IdGrupo, value) = false) Then
				Me._IdGrupo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me._Descripcion = value
			End If
		End Set
	End Property
End Class

Partial Public Class FiltrarCategoriaResult
	
	Private _IdCategoria As String
	
	Private _Descripcion As String
	
	Private _IdGrupo As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategoria", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property IdCategoria() As String
		Get
			Return Me._IdCategoria
		End Get
		Set
			If (String.Equals(Me._IdCategoria, value) = false) Then
				Me._IdCategoria = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me._Descripcion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGrupo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property IdGrupo() As String
		Get
			Return Me._IdGrupo
		End Get
		Set
			If (String.Equals(Me._IdGrupo, value) = false) Then
				Me._IdGrupo = value
			End If
		End Set
	End Property
End Class

Partial Public Class FiltrarProductoResult
	
	Private _CodProducto As String
	
	Private _Nombre As String
	
	Private _IdUnidad As Integer
	
	Private _IdGrupo As String
	
	Private _IdCategoria As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodProducto", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property CodProducto() As String
		Get
			Return Me._CodProducto
		End Get
		Set
			If (String.Equals(Me._CodProducto, value) = false) Then
				Me._CodProducto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me._Nombre = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnidad", DbType:="Int NOT NULL")>  _
	Public Property IdUnidad() As Integer
		Get
			Return Me._IdUnidad
		End Get
		Set
			If ((Me._IdUnidad = value)  _
						= false) Then
				Me._IdUnidad = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGrupo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property IdGrupo() As String
		Get
			Return Me._IdGrupo
		End Get
		Set
			If (String.Equals(Me._IdGrupo, value) = false) Then
				Me._IdGrupo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategoria", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property IdCategoria() As String
		Get
			Return Me._IdCategoria
		End Get
		Set
			If (String.Equals(Me._IdCategoria, value) = false) Then
				Me._IdCategoria = value
			End If
		End Set
	End Property
End Class

Partial Public Class FiltrarSucursalResult
	
	Private _IdSucrusal As Integer
	
	Private _Nombre As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSucrusal", DbType:="Int NOT NULL")>  _
	Public Property IdSucrusal() As Integer
		Get
			Return Me._IdSucrusal
		End Get
		Set
			If ((Me._IdSucrusal = value)  _
						= false) Then
				Me._IdSucrusal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me._Nombre = value
			End If
		End Set
	End Property
End Class

Partial Public Class FiltrarBodegaResult
	
	Private _IdBodega As Integer
	
	Private _Nombre As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBodega", DbType:="Int NOT NULL")>  _
	Public Property IdBodega() As Integer
		Get
			Return Me._IdBodega
		End Get
		Set
			If ((Me._IdBodega = value)  _
						= false) Then
				Me._IdBodega = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me._Nombre = value
			End If
		End Set
	End Property
End Class

Partial Public Class FiltrarProveedorResult
	
	Private _IdProveedor As Integer
	
	Private _NumRuc As String
	
	Private _Nombre As String
	
	Private _FCrea As System.Nullable(Of Date)
	
	Private _Direccion As String
	
	Private _Telefono As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProveedor", DbType:="Int NOT NULL")>  _
	Public Property IdProveedor() As Integer
		Get
			Return Me._IdProveedor
		End Get
		Set
			If ((Me._IdProveedor = value)  _
						= false) Then
				Me._IdProveedor = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumRuc", DbType:="VarChar(50)")>  _
	Public Property NumRuc() As String
		Get
			Return Me._NumRuc
		End Get
		Set
			If (String.Equals(Me._NumRuc, value) = false) Then
				Me._NumRuc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(50)")>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me._Nombre = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FCrea", DbType:="Date")>  _
	Public Property FCrea() As System.Nullable(Of Date)
		Get
			Return Me._FCrea
		End Get
		Set
			If (Me._FCrea.Equals(value) = false) Then
				Me._FCrea = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(200)")>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me._Direccion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(20)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me._Telefono = value
			End If
		End Set
	End Property
End Class
